# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: andrucare
# "service" is the name of this project. This will also be added to your AWS resource names.
service: productService

provider:
  name: aws
  runtime: nodejs22.x
  environment:
    BUCKET_NAME: !Ref ProductImagesBucket  
    DYNAMO_TABLE: !Ref ProductTable
    SNS_TOPIC_ARN: !Ref ProductCleanupTopic
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource:
        - !Sub "${ProductImagesBucket.Arn}/*"  #permissions for objects inside banner (operations like update object, get object)
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
        - dynamodb:DeleteItem
      Resource:
        - !GetAtt ProductTable.Arn
    - Effect: Allow
      Action: SNS:Publish
      Resource: !Ref ProductCleanupTopic
      
  httpApi:
    authorizers:
      myCognitoAuth: #custom name for cognito auth used in routes
        type: jwt
        identitySource: $request.header.Authorization #Extract JWT from Authorization
        issuerUrl: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_E1pb97u1s #URL of cognito user pool to verify tokens
        audience: 
          - 10pguitdu90egc2rh3a2n6ftom  #cognito cliend ID ensures tokens come from right app

build:
  esbuild:
    bundle: true
    minify: false
    exclude:
      - "@aws-sdk/*"

resources:
  Resources:
    ProductTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Products
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    
    ProductImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: product-images-sls-ms-ts-test

    ProductCleanupTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ProductCleanupTopic

    ProductCleanupSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref ProductCleanupTopic 
        Protocol: email
        Endpoint: andrucar25@gmail.com

functions:
  getUploadUrl:
    handler: handlers/getUploadUrl.getUploadUrl
    events:
      - httpApi:
          path: /get-upload-url
          method: post
          authorizer: myCognitoAuth

  getApprovedProducts:
    handler: handlers/getApprovedProducts.getApprovedProducts
    events:
      - httpApi:
          path: /get-approved-products
          method: get
          # authorizer: myCognitoAuth

  updateProductImage:
    handler: handlers/updateProductImage.updateProductImage
    events:
      - s3:
          bucket: !Ref ProductImagesBucket
          event: s3:ObjectCreated:Put
          existing: true
  
  cleanupProducts:
    handler: handlers/cleanupProducts.cleanupProducts
    events:
      - schedule: rate(2 minutes)  #runs lambda every 2 minutes
