# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: andrucare
# "service" is the name of this project. This will also be added to your AWS resource names.
service: categoryService

provider:
  name: aws
  runtime: nodejs22.x
  environment:
    BUCKET_NAME: !Ref CategoryImagesBucket  #get bucket name 
    DYNAMO_TABLE: !Ref CategoryTable
    SNS_TOPIC_ARN: !Ref CategoryCleanupTopic
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource:
        - !Sub "${CategoryImagesBucket.Arn}/*"  #permissions for objects inside banner (operations like update object, get object)
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
        - dynamodb:DeleteItem
      Resource:
        - !GetAtt CategoryTable.Arn
    - Effect: Allow
      Action: sns:Publish
      Resource: !Ref CategoryCleanupTopic

build:
  esbuild:
    bundle: true
    minify: false
    exclude:
      - "@aws-sdk/*"

resources:
  Resources:
    CategoryImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: category-images-sls-ms-ts-test

    CategoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Categories
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: fileName
            AttributeType: S
        KeySchema:
          - AttributeName: fileName
            KeyType: HASH

    CategoryCleanupTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: CategoryCleanupTopic

    CategoryCleanupSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref CategoryCleanupTopic 
        Protocol: email
        Endpoint: andrucar25@gmail.com

functions:
  getUploadUrl:
    handler: handlers/getUploadUrl.getUploadUrl
    events:
      - httpApi:
          path: /upload-url
          method: post

  updateCategoryImage:
    handler: handlers/updateCategoryImage.updateCategoryImage
    events:
      - s3:
          bucket: !Ref CategoryImagesBucket
          event: s3:ObjectCreated:Put #trigger event when a new object is upload to s3 bucket
          existing: true

  cleanupCategories:
    handler: handlers/cleanupCategories.cleanupCategories
    events:
      - schedule: rate(2 minutes)  #runs lambda every 2 minutes

