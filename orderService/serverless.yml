# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: andrucare
# "service" is the name of this project. This will also be added to your AWS resource names.
service: orderService

provider:
  name: aws
  runtime: nodejs22.x
  environment:
    DYNAMO_TABLE: !Ref OrdersTable
    SQS_QUEUE_URL: !Ref OrderQueue 
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - sqs:SendMessage 
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
      Resource:
        - !GetAtt OrdersTable.Arn
        - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Products"
        - !GetAtt OrderQueue.Arn

  httpApi:
    authorizers:
      myCognitoAuth: 
        type: jwt
        identitySource: $request.header.Authorization 
        issuerUrl: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_E1pb97u1s #URL of cognito user pool to verify tokens
        audience: 
          - 10pguitdu90egc2rh3a2n6ftom  

build:
  esbuild:
    bundle: true
    minify: false
    exclude:
      - "@aws-sdk/*"
resources:
  Resources:
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Orders
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    OrderQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: OrderQueue

functions:
  placeOrder:
    handler: handlers/placeOrder.placeOrder
    events:
      - httpApi:
          path: /create-order
          method: post
          authorizer: myCognitoAuth
  processOrder:
    handler: handlers/processOrder.processOrder
    events:
      - sqs:
          arn: !GetAtt OrderQueue.Arn